import pickle

import joblib
import streamlit as st
import pandas as pd
import catboost
import numpy as np
from sklearn.impute import KNNImputer, SimpleImputer
from sklearn.preprocessing import OrdinalEncoder

st.set_page_config(
    page_title="RealHouse",
    page_icon="üìä",
)
st.sidebar.success("–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª")
st.title('–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏')
st.subheader('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –∑–Ω–∞–µ—Ç–µ')
st.text(''' –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞, –ø–æ–∂–∞–ª—É–π—Å–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ, 
–æ–±—â–µ–π –ø–ª–æ—â–∞–¥—å—é, —Ä–µ–≥–∏–æ–Ω–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã.
–ü–æ–ª–µ "–î–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω" –æ–±–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'''
        )
c = ['region', 'address', 'total_area', 'kitchen_area',
       'living_area', 'rooms_count', 'floor', 'floors_number', 'build_date',
       'is_complete', 'completion_year', 'house_material', 'parking',
       'decoration', 'balcony', 'longitude', 'latitude', 'passenger_elevator',
       'cargo_elevator', 'metro', 'metro_distance', 'metro_transport',
       'district', 'is_apartments', 'is_auction']
df = pd.DataFrame(columns=c)

data = {}
for i in c:
    data[i] = np.nan
options = st.multiselect("–ü—Ä–∏–∑–Ω–∞–∫–∏",['–†–µ–≥–∏–æ–Ω', '–ê–¥—Ä–µ—Å', '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å', '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏', '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç',
                                     '–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π', '–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞', '–î–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω',
                                     '–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞', '–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞', '–¢–∏–ø –ø–∞—Ä–∫–æ–≤–∫–∏', '–¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏',
                                     '–ß–∏—Å–ª–æ –±–∞–ª–∫–æ–Ω–æ–≤', '–î–æ–ª–≥–æ—Ç–∞ –¥–æ–º–∞', '–®–∏—Ä–æ—Ç–∞ –¥–æ–º–∞', '–ß–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ª–∏—Ñ—Ç–æ–≤',
                                     '–ß–∏—Å–ª–æ –≥—Ä—É–∑–æ–≤—ã—Ö –ª–∏—Ñ—Ç–æ–≤', '–ú–µ—Ç—Ä–æ', '–†–∞–π–æ–Ω', '–ö–≤–∞—Ä—Ç–∏—Ä–∞ - –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã', '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ'])
flag = st.checkbox('–í—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–æ–±—Ä–∞–Ω—ã?')
for option in options:
    if option == '–†–µ–≥–∏–æ–Ω':
        region = st.radio('–û–±–ª–∞—Å—Ç—å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–≤–∞—Ä—Ç–∏—Ä—ã:', ['spb', 'msk',  'kzn',  'nng', 'ekb', 'nsk'])
        data['region'] = region
    elif option == '–ê–¥—Ä–µ—Å':
        address = st.text_area('–ê–¥—Ä–µ—Å –¥–æ–º–∞:')
        data['address'] = address
    elif option == '–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å':
        total_area = st.number_input('–ü–ª–æ—â–∞–¥—å –¥–æ–º–∞ –≤ –∫–≤. –º–µ—Ç—Ä–∞—Ö:', value=None, min_value=5.0, max_value=2000.0, step=0.1,
                                     placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ...')
        data['total_area'] = total_area
    elif option == '–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏':
        kitchen_area = st.number_input('–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –≤ –∫–≤. –º–µ—Ç—Ä–∞—Ö:', value=None, min_value=5.0, max_value=2000.0, step=0.1,
                                     placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ...')
        data['kitchen_area'] = kitchen_area
    elif option == '–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å':
        living_area = st.number_input('–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å –≤ –∫–≤. –º–µ—Ç—Ä–∞—Ö:', value=None, min_value=5.0, max_value=2000.0, step=0.1,
                                     placeholder='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ...')
        data['living_area'] = living_area
    elif option == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç':
        rooms_count = st.radio('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ:', [i for i in range(1, 9)])
        data['rooms_count'] = rooms_count
    elif option == '–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞':
        floor = st.slider('–ù–æ–º–µ—Ä —ç—Ç–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã', 1, 100)
        data['floor'] = floor
    elif option == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π':
        floors_number = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ', 1, 100)
        data['floors_number'] = floors_number
    elif option == '–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞':
        build_date = st.number_input('–ì–æ–¥ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞:', value=None, min_value=1800, max_value=2024, step=1,
                                     placeholder='–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥...')
        data['build_date'] = build_date
    elif option == '–î–æ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω':
        is_complete= st.radio('–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ?', ['–î–∞', '–ù–µ—Ç'])
        data['is_complete'] = is_complete

    elif option == '–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞':
        completion_year = st.number_input('–ì–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –¥–æ–º–∞:', value=None, min_value=1860, max_value=2029,
                                     step=1,
                                     placeholder='–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥...')
        data['completion_year'] = completion_year
    elif option == '–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–º–∞':
        house_material = st.radio('–û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–¥–µ–ª–∞–Ω –¥–æ–º:', ['–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–∏—Ä–ø–∏—á', '–ú–æ–Ω–æ–ª–∏—Ç', '–ö–∏—Ä–ø–∏—á',
                                                                                '–ü–∞–Ω–µ–ª—å', '–°—Ç–∞–ª—å', '–°—Ç–∞—Ä—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª', '–î–µ—Ä–µ–≤–æ',
                                                                                '–ì–∞–∑–æ—Å–∏–ª–∏–∫–∞—Ç–Ω—ã–π –±–ª–æ–∫'])
        data['house_material'] = house_material
    elif option == '–¢–∏–ø –ø–∞—Ä–∫–æ–≤–∫–∏':
        parking = st.selectbox('–¢–∏–ø –ø–∞—Ä–∫–æ–≤–∫–∏ —É –¥–æ–º–∞:', ['–ü–æ–¥–∑–µ–º–Ω–∞—è', '–ù–∞–∑–µ–º–Ω–∞—è', '–ú—É–ª—å—Ç–∏—É—Ä–æ–≤–Ω–µ–≤–∞—è', '–û—Ç–∫—Ä—ã—Ç–∞—è'])
        data['parking'] = parking
    elif option == '–¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏':
        decoration = st.selectbox('–¢–∏–ø –æ—Ç–¥–µ–ª–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã:', ['–ë–µ–∑ –æ—Ç–¥–µ–ª–∫–∏', '–ì—Ä—É–±–∞—è –æ—Ç–¥–µ–ª–∫–∞', '–ù–µ–±–æ–ª—å—à–∞—è –æ—Ç–¥–µ–ª–∫–∞'])
        data['decoration'] = decoration
    elif option == '–ß–∏—Å–ª–æ –±–∞–ª–∫–æ–Ω–æ–≤':
        balcony = st.selectbox('–ß–∏—Å–ª–æ –±–∞–ª–∫–æ–Ω–æ–≤ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ:', [0, 1, 2, 3, 4, 5])
        data['balcony'] = balcony
    elif option == '–î–æ–ª–≥–æ—Ç–∞ –¥–æ–º–∞':
        longitude = st.number_input('–ö–æ–æ—Ä–¥–∏–∞–Ω—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã –¥–æ–º–∞:', value=None, min_value=29.04, max_value=84.01, step=0.01)
        data['longitude'] = longitude
    elif option == '–®–∏—Ä–æ—Ç–∞ –¥–æ–º–∞':
        latitude = st.number_input('–ö–æ–æ—Ä–¥–∏–∞–Ω—Ç–∞ —à–∏—Ä–æ—Ç—ã –¥–æ–º–∞:', value=None, min_value=54.85, max_value=61.00, step=0.01)
        data['latitude'] = latitude
    elif option == '–ß–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ª–∏—Ñ—Ç–æ–≤':
        passenger_elevator = st.number_input('–ß–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä—Å–∫–∏—Ö –ª–∏—Ñ—Ç–æ–≤ –≤ –¥–æ–º–µ', value=2, min_value=0, max_value=35, step=1)
        data['passenger_elevator'] = passenger_elevator
    elif option == '–ß–∏—Å–ª–æ –≥—Ä—É–∑–æ–≤—ã—Ö –ª–∏—Ñ—Ç–æ–≤':
        cargo_elevator = st.number_input('–ß–∏—Å–ª–æ –≥—Ä—É–∑–æ–≤—ã—Ö –ª–∏—Ñ—Ç–æ–≤ –≤ –¥–æ–º–µ', value=2, min_value=0, max_value=35, step=1)
        data['cargo_elevator'] = cargo_elevator
    elif option == '–ú–µ—Ç—Ä–æ':
        metro = st.text_area('–ë–ª–∏–∂–∞–π—à–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –¥–æ–º–∞ –∫ –º–µ—Ç—Ä–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:')
        i, ii = '', ''
        data['metro'] = metro
        for m in (metro.split(',')):
            metro_distance = st.slider(f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–º –æ—Ç –¥–æ–º–∞ –¥–æ –º–µ—Ç—Ä–æ {m}', 1, 60)
            i += str(metro_distance) + ', ' * (m != metro.split((','))[-1])
            metro_transport = st.radio(f'–¢–∏–ø –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç –¥–æ–º–∞ –¥–æ –º–µ—Ç—Ä–æ {m}', ["–ü–µ—à–∫–æ–º","–ù–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ"])
            ii += str(metro_transport) + ", " * (m != metro.split((','))[-1])
        data['metro_distance'] = i
        data['metro_transport'] = ii
    elif option == '–†–∞–π–æ–Ω':
        district = st.text_area('–†–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –¥–æ–º:')
        data['district'] = district
    elif option == '–ö–≤–∞—Ä—Ç–∏—Ä–∞ - –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã':
        is_apartments = st.checkbox('–ö–≤–∞—Ä—Ç–∏—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º–∏')
        data['is_apartments'] = is_apartments
    elif option == '–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ':
        is_auction = st.checkbox('–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω?')
        data['is_auction'] = is_auction
if flag:
    data_lists = {key: [value] for key, value in data.items()}
    df = pd.DataFrame.from_dict(data_lists)
    st.write(df)
    df['is_complete'] = df.apply(lambda x: int(x.completion_year < 2024) if pd.isna(x.is_complete) and not pd.isna(x.completion_year) else x.is_complete, axis=1)

    # –í—Ç–æ—Ä–æ–π –±–ª–æ–∫ –∫–æ–¥–∞
    df['is_complete'] = df.apply(lambda x: int(x.build_date < 2024) if pd.isna(x.is_complete) and not pd.isna(x.build_date) else x.is_complete, axis=1)

    # –¢—Ä–µ—Ç–∏–π –±–ª–æ–∫ –∫–æ–¥–∞
    df['is_complete'] = df.apply(lambda x: int(x.is_auction) if pd.isna(x.is_complete) else x.is_complete, axis=1)
    st.write(df)
    df['decoration'] = df.apply(lambda x: 'without' if pd.isna(x.decoration) and not x.is_complete else x.decoration,
                                axis=1)
    df['house_material'] = df.apply(
        lambda x: '–ü–∞–Ω–µ–ª—å' if pd.isna(x.house_material) and x.floors_number in (5, 9) else x.house_material, axis=1)

    # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π 'stalin' –Ω–∞ 'brick' –≤ —Å—Ç–æ–ª–±—Ü–µ 'house_material'
    # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ house_material
    df['house_material'] = df['house_material'].replace(['–°—Ç–∞–ª—å', '–ì–∞–∑–æ—Å–∏–ª–∏–∫–∞—Ç–Ω—ã–π –±–ª–æ–∫'], '–ö–∏—Ä–ø–∏—á')
    df['house_material'] = df['house_material'].replace(['–î–µ—Ä–µ–≤–æ', '–°—Ç–∞—Ä—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª'], '–ü–∞–Ω–µ–ª—å')



    def calculate_passenger_elevator(x):
        if pd.isna(x.passenger_elevator):
            if x.floors_number in range(1, 6) and x.house_material == '–ü–∞–Ω–µ–ª—å':
                return 0
            elif x.floors_number == 9:
                return 1
            elif 10 <= x.floors_number <= 19:
                return 2
            elif 20 <= x.floors_number <= 25:
                return 3
            elif x.floors_number >= 26:
                return 4
        return x.passenger_elevator


    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ DataFrame
    df['passenger_elevator'] = df.apply(calculate_passenger_elevator, axis=1)


    def calculate_cargo_elevator(x):
        if pd.isna(x.cargo_elevator):
            if x.floors_number in range(1, 10):
                return 0
            elif 10 <= x.floors_number <= 12 and x.passenger_elevator == 0:
                return 1
            elif 12 <= x.floors_number <= 22 and x.passenger_elevator in (1, 2):
                return 1
            elif 23 <= x.floors_number <= 29 and x.passenger_elevator in (1, 2):
                return 2
        return x.cargo_elevator


    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ DataFrame
    df['cargo_elevator'] = df.apply(calculate_cargo_elevator, axis=1)
    df['parking'] = df.apply(lambda x: '–û—Ç–∫—Ä—ã—Ç–∞—è' if pd.isna(x.parking) else x.parking, axis=1)
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–æ–º–∞
    df['house_age'] = 2024 - df['build_date']

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π 'house_age' –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–º–∞
    df.loc[(df['is_complete'] == 0) & (df['house_age'].isna()), 'house_age'] = 0
    df.loc[(df['is_complete'] == 1) & (df['house_age'].isna()), 'house_age'] = 2024 - df['completion_year']
    df['is_first_floor'] = df.apply(lambda x: 1 if x.floor == 1 else 0, axis=1)
    df['is_last_floor'] = df.apply(lambda x: 1 if x.floor == x.floors_number else 0, axis=1)
    df['has_metro'] = df.apply(lambda x: 0 if pd.isna(x.metro) else 1, axis=1)


    def calculate_mean_metro(row):
        if row['has_metro'] == 0:
            return 0
        metro_distances = row['metro_distance'].split(',')
        metro_distances = [float(distance) for distance in metro_distances if
                           distance.strip()]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if not metro_distances:
            return 0
        return np.mean(metro_distances)


    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ DataFrame
    df['mean_metro'] = df.apply(calculate_mean_metro, axis=1)
    st.write(df)
    d = {'total_area': 61.1,
         'floor': 5.0,
         'floors_number': 15.0,
         'house_age': 0.0,
         'living_area': 30.0,
         'kitchen_area': 14.6,
         'mean_metro': 7.0}
    df.fillna(value=d, inplace=True)
    st.write(df)
    dd = {'region': 'msk',
         'rooms_count': 2.0,
         'is_complete': 1.0,
         'house_material': '–ú–æ–Ω–æ–ª–∏—Ç',
         'parking': '–û—Ç–∫—Ä—ã—Ç–∞—è',
         'passenger_elevator': 1.0,
         'cargo_elevator': 1.0,
         'is_apartments': 0.0,
         'is_auction': 0,
         'is_first_floor': 0,
         'is_last_floor': 0,
         'has_metro': 1}
    df.fillna(value=dd, inplace=True)
    num_f = ['total_area',
             'floor',
             'floors_number',
             'house_age',
             'living_area',
             'kitchen_area',
             'longitude',
             'latitude',
             'mean_metro',
             ]
    cat_f = ['region',
             #          'decoration',
             'rooms_count',
             'is_complete',
             'house_material',
             'parking',
             'passenger_elevator',
             'cargo_elevator',
             'is_apartments',
             'is_auction',
             'is_first_floor',
             'is_last_floor',
             'has_metro',
             ]

    df = df[num_f + cat_f].copy()
    st.write(df)
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞–º–∏
    df.replace({'region': {'msk': 2, 'spb': 5, 'ekb': 0, 'nsk' : 4, 'nng' : 3, 'kzn' : 1 },
                'house_material': {'–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π –∫–∏—Ä–ø–∏—á': 1, '–ú–æ–Ω–æ–ª–∏—Ç': 2, '–ö–∏—Ä–ø–∏—á': 0, '–ü–∞–Ω–µ–ª—å': 3},
                'parking': {'–û—Ç–∫—Ä—ã—Ç–∞—è': 2, '–ü–æ–¥–∑–µ–º–Ω–∞—è': 3, '–ù–∞–∑–µ–º–Ω–∞—è' : 0,  '–ú—É–ª—å—Ç–∏—É—Ä–æ–≤–Ω–µ–≤–∞—è': 1},
                # –î—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —á–∏—Å–ª–∞–º
                }, inplace=True)
    st.write(df)
    st.write(df.dtypes)

    if df.iloc[0]['rooms_count'] == 1:
        model = joblib.load(open('models_configs/model_(1)rc.joblib', 'rb'))
        price_predict = model.predict(df)
        st.subheader(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {round(price_predict, 2)} —Ä—É–±–ª–µ–π')
        st.write(price_predict)
    if df.iloc[0]['rooms_count'] == 2:
        model = joblib.load(open('models_configs/model_(2)rc.joblib', 'rb'))
        price_predict = model.predict(df)
        st.subheader(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {round(price_predict, 2)} —Ä—É–±–ª–µ–π')
    if df.iloc[0]['rooms_count'] == 3:
        model = joblib.load(open('models_configs/model_(2)rc.joblib', 'rb'))
        price_predict = model.predict(df)
        st.subheader(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {round(price_predict, 2)} —Ä—É–±–ª–µ–π')
    if df.iloc[0]['rooms_count'] == 4:
        model = joblib.load(open('models_configs/model_(2)rc.joblib', 'rb'))
        price_predict = model.predict(df)
        st.subheader(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {round(price_predict, 2)} —Ä—É–±–ª–µ–π')
    if df.iloc[0]['rooms_count'] > 4:
        model = joblib.load(open('models_configs/model_(2)rc.joblib', 'rb'))
        price_predict = model.predict(df)
        st.subheader(f'–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è: {round(price_predict, 2)} —Ä—É–±–ª–µ–π')
    import plotly.express as px


    def plot_with_prediction_highlight(df, prediction_df):
        fig = px.scatter(df, x='total_area', y='price', color_discrete_sequence=['blue'], title='–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∏ —Ü–µ–Ω–∞')
        fig.add_scatter(x=prediction_df['total_area'], y=prediction_df['price_pred'], mode='markers',
                        marker=dict(color='red', size=10), name='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ')
        fig.update_xaxes(title_text='–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–∫–≤.–º)')
        fig.update_yaxes(title_text='–¶–µ–Ω–∞, —Ä—É–±.')
        fig.show()


    def plot_dist_with_prediction(df, prediction_df):
        fig = px.histogram(df, x='price', color_discrete_sequence=['blue'], marginal='rug',
                           title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞')

        for _, row in prediction_df.iterrows():
            fig.add_vline(x=row['price_pred'], line_dash='dash', line_color='red', annotation_text='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞')

        fig.update_layout(xaxis_title='–¶–µ–Ω–∞, —Ä—É–±.', yaxis_title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
        fig.show()









